%FIT SOMEWHERE ELSE
\subparagraph{}Bij het oplossen van Horn Clauses moet $F$ bovendien ook een speciale vorm hebben:
\begin{equation}
\exists x_1,\exists x_2,\ldots,\exists x_k\ B_1\wedge B_2\wedge\ldots\wedge B_n
\end{equation}
Merk op dat \underline{$F$} alleen maar existenti\"ele kwantoren mag bevatten, verder zijn $B_1,B_2,\ldots,B_n$ atomen waartussen alleen $\wedge$-connectoren mogen staan. De oplossingsmethode hiervoor zullen we in twee fases ontwikkelen, eerst beperken we ons tot gegronde Horn Clauses. Gegrond betekend dat er geen variabelen in de expressies mogen staan. Momenteel gaan we er dus vanuit dat in de theorie $T$ en $F$ alleen statements zonder quantoren voorkomen. Om tot een oplossing te komen maken we gebruik van de \termen{Modus Ponens}. Deze stelt dat gegeven een expressie $A\leftarrow B$, en we weten dat $B$ waar is, we ook weten dat $A$ waar is, of meer formeel:
\begin{equation}
\begin{array}{lr}
&B\\
\therefore&A\leftarrow B\\
\hline
&A\\
\end{array}
\end{equation}
Het probleem is dat we in Horn Clauses toestaan dat ook conjuncties aan de rechterkant mogen staan. We kunnen echter de Modus Ponens veralgemenen, en defini\"eren de \termen{Veralgemeende Modus Ponens} als
\begin{equation}
\begin{array}{lr}
&B_1\\
&B_2\\
&\vdots\\
&B_n\\
\therefore&A\leftarrow B_1\wedge B_2\wedge\ldots\wedge B_n\\
\hline
&A\\
\end{array}
\end{equation}
Deze stellings is makkelijk te bewijzen met behulp van inductie. We kunnen vervolgens een procedure bouwen die vanuit de theorie op zoek de Modus Ponens toepast todat alle atomen in $F$ als feiten gezien worden, en we dus $F$ bewezen hebben. Indien we dit doen met behulp van een \termen{Voorwaartse bewijsprocedure} bekomen we \algref{alg:forwardModusPonens}.
\begin{algorithm}[h]                      % enter the algorithm environment
\caption{Voorwaartse oplossingsstrategie voor gegronde horn clause}          % give the algorithm a caption
\label{alg:forwardModusPonens}                           % and a label for \ref{} commands later in the document
\begin{algorithmic}[1]                    % enter the algorithmic environment
\REQUIRE $F=C_1\wedge C_2\wedge\ldots\wedge C_m$
\STATE $\derived\leftarrow\varnothing$
\REPEAT
\STATE$\selectone{T,A\leftarrow B_1\wedge B_2\wedge\ldots\wedge B_n,A\notin\derived\wedge\forall i: B_i\in\derived}$
\STATE$\derived\leftarrow\derived\cup\left\{A\right\}$
\UNTIL{$\forall i:C_i\in\derived\vee\neg \selectionpossible{T,A\leftarrow B_1\wedge B_2\wedge\ldots\wedge B_n,A\notin\derived\wedge\forall i: B_i\in\derived}$}
\IF{$\forall i:C_i\in\derived$}
\RETURN $T\vDash F$
\ELSE
\RETURN $\failure$
\ENDIF
\end{algorithmic}
\end{algorithm}
Dit algoritme is correct omdat de veralgemeende modus ponens correct is, en we eigenlijk niets anders doen dan deze herhaaldelijk uitvoeren. Het algoritme is ook volledig, omdat er slechts een eindig aantal \underline{gegronde} Horn Clauses in $T$ zitten, bijgevolg zijn er maar een eindig aantal atomaire gevolgen. Effici\"ent is dit algoritme echter niet, het gaat niet gericht op zoek naar een oplossing maar probeert gewoon tot het uiteindelijk bij toeval de oplossing vindt. Er kunnen dus heel wat atomaire gevolgen afgeleid worden waar we eigenlijk niets aan hebben. Om dit probleem op te lossen zijn achterwaartse implementaties beter, waarbij men kijkt welke atomen men nodig heeft, en deze vervolgens probeert te zoeken.
\subparagraph{}
Achterwaarts redeneren voor gegronde Horn Clauses vormt zal dit ineffici\"entieprobleem proberen op te lossen. Hierbij baseren we ons op de inconsistentietheorie in \ref{sss:incisistenceProof}. Het probleem is echter dat $\neg F$ geen Horn Clause theorie is, laat staan een gegronde. Indien we echter $\neg F$ toevoegen als $\false\leftarrow F$ en we voeren $\false$ in als een nieuw predicaatsymbool, dan kunnen we toch achterwaarts redeneren. Hierbij defini\"eren we $\false$ als een predicaatsymbool die altijd de waarheidswaarde onwaar heeft bij iedere interpretatie. Zoals reeds vermeld heeft $F$ in de Horn Clause de vorm:
\begin{equation}
\exists x_1,\exists x_2,\ldots,\exists x_k\ B_1\wedge B_2\wedge\ldots\wedge B_n
\end{equation}
Indien we de negatie van deze expressie nemen bekomen we volgende expressie:
\begin{equation}
\forall x_1,\forall x_2,\ldots,\forall x_k\ \false\leftarrow B_1\wedge B_2\wedge\ldots\wedge B_n
\end{equation}
We kunnen hierbij opmerken dat $\neg F$ dus opnieuw een expressie in Horn Clausale logica is. Nu zullen we een achterwaartse redeneermethode construeren, die in staat is om gegeven een functie $F=B_1\wedge B_2\wedge\ldots\wedge B_n$ te bewijzen dat deze methode klopt. Dit doen we door ieder 
%29
